// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    // 指令解码
    // 7个指令(a,zx,nx,zy,ny,f,no)传入ALU
    // 3个指令(dA, dD, dM)用于确定是否将ALU的输出值存入相应的内存或寄存器
    // 3个指令(j1, j2, j3)用于判断jump条件是否满足
    Instruction16(in=instruction, a=a, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, 
        dA=dA, dD=dD, dM=writeM, j1=j1, j2=j2, j3=j3);
    
    // 选择instruction或ALU的输出，写入寄存器A
    Not(in=instruction[15], out=Not15);
    Mux16(a=ALUout, b=instruction, sel=Not15, out=Muxout1);
    Or(a=dA, b=Not15, out=Aload);
    ARegister(in=Muxout1, load=Aload, out=A);
    
    // 确定是否将ALU的输出写入寄存器D
    DRegister(in=ALUout, load=dD, out=D);
    
    // 选择A或M，输入ALU
    Mux16(a=A, b=inM, sel=a, out=Muxout2);
    ALU(x=D, y=Muxout2, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, 
        out=outM, out=ALUout, zr=zr, ng=ng);
    
    // 根据ALU的zr(是否为0)、ng(是否为负值)判断ALU输出值是否为正值(ps)
    Or(a=ng, b=zr, out=outps);
    Not(in=outps, out=ps);
    
    // 根据zr,ng,ps和j1,j2,j3做出判断，是否执行跳转(PCload=1代表跳转)
    And(a=ng, b=j1, out=Andout1);
    And(a=zr, b=j2, out=Andout2);
    And(a=ps, b=j3, out=Andout3);
    Or(a=Andout1, b=Andout2, out=Orout);
    Or(a=Andout3, b=Orout, out=PCload);
    
    // 根据各个输入，创建计数器
    PC(in=A, load=PCload, inc=true, reset=reset, out=pc16);
    
    // 将16位的地址和计数器的数值转换位15位
    Bit16to15(in=A, out=addressM);
    Bit16to15(in=pc16, out=pc); 
}